using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.IO;
using System.Collections;

namespace life
{
    class Program
    {
        static void Main(string[] args)
        {
            WT();
            Mat();
            Shixian();
            JiLei();
            Stacks();
            HashSet();
            ArrayLists();
            Duo();
            LMS();
            pelepes();
            Shu();
            ValueType();
            Er();
            YiMao();
            Jiu();
            Ji();
            Yi();
            HanShu();
            Console.ReadLine();
        }
        //九九乘法表
        public static void Jiu()
        {
            for (int i = 1; i <= 9; i++)
            {
                for (int j = 1; j <= i; j++)
                {
                    Console.Write(i + "*" + j + "=" + (i * j) + " ");
                }
                Console.WriteLine();
            }

        }
        //鸡兔同笼
        public static void Ji()
        {
            Console.WriteLine("请输入腿的总数");
            int i = int.Parse(Console.ReadLine());
            Console.WriteLine("请输入头的总数");
            int j = int.Parse(Console.ReadLine());
            Console.WriteLine("兔子的数量为:");
            int v = (i - 2 * j) / (4 - 2);
            Console.WriteLine(v);
            Console.WriteLine("鸡的数量为:");
            int c = j - v;
            Console.WriteLine(c);
        }
        //数组
        //一位数组
        public static void Yi()
        {
            int[] ints = new int[] { 3, 4, 8, 7, 2, 9, 5, 6, 1 };
            for (int i = 0; i < ints.Length; i++)
            {
                Console.Write(i);
            }
        }
        //一位数组排序结果:
        public static void YiMao()
        {
            int[] array = new int[] { 3, 4, 8, 7, 2, 9, 5, 6, 1 };
            int min;
            for (int i = 0; i < array.Length - 1; i++)
            {
                min = i;
                for (int j = i + 1; j < array.Length; j++)
                {
                    if (array[j] < array[min])
                        min = j;
                }
                int t = array[min];
                array[min] = array[i];
                array[i] = t;
            }
            Console.Write("数组排序后的结果为：");
            foreach (int n in array)
            {
                Console.Write("{0}", n + " ");
            }
            Console.ReadLine();


        }
        //二位数组
        public static void Er()
        {
            int[,] arrey = new int[5, 2] { { 1, 2 }, { 3, 4 }, { 5, 6 }, { 7, 8 }, { 9, 1 } };
            for (int i = 0; i < 5; i++)
            {
                for (int j = 0; j < 2; j++)
                {

                    Console.WriteLine("arrey[{0},{1}]={2}", i, j, arrey[i, j]);
                }
            }
        }
        //函数
        public static void HanShu()
        {
            Console.WriteLine("请输入第一个数");
            int i = int.Parse(Console.ReadLine());
            Console.WriteLine("请输入第二个数");
            int j = int.Parse(Console.ReadLine());
            Console.WriteLine("两数之和为");
            Console.WriteLine(sum(i, j));
        }
        static int sum(int i, int j)
        {
            return i * j;
        }
        //引用类型
        class Yis { public Int32 x; }
        //值类型
        struct Zhi { public Int32 x; }
        public static void ValueType()
        {
            Yis Y = new Yis();
            Zhi Z = new Zhi();
            Y.x = 4;
            Z.x = 2;
            Yis Y1 = Y;//引用类型
            Zhi zhi = Z;//值类型
            Y.x = 3;
            Z.x = 5;
            Console.WriteLine(Y.x);
            Console.WriteLine(Z.x);
            Console.WriteLine(Y1.x);
            Console.WriteLine(zhi.x);

        }

        //文件的输入与输出
        public static void Shu()
        {
            FileStream file = new FileStream("H://刘三姐.docx", FileMode.Open, FileAccess.Write);
            Console.Write("请输入文本:");
            string str = Console.ReadLine();
            byte[] hebyte = Encoding.UTF8.GetBytes(str);
            file.Write(hebyte, 0, hebyte.Length);
            Console.WriteLine("ok");
            file.Close();
            FileStream file1 = new FileStream(@"H://刘三姐.docx", FileMode.Open);
            int ints = (int)file1.Length;
            byte[] hebytes = new byte[ints];
            int hebytes1 = file1.Read(hebytes, 0, hebytes.Length);
            string s = System.Text.Encoding.UTF8.GetString(hebytes);
            Console.WriteLine(s);
        }

        //封装
        public class Pelepe
        {
            public string Name { get; set; }
            public int Age { get; set; }
            public string Hobby { get; set; }
        }

        public static void pelepes()
        {
            Pelepe pelepe = new Pelepe();
            pelepe.Name = "琉克";
            pelepe.Age = 12843;
            pelepe.Hobby = "死神镰刀";
            Console.WriteLine("你好，我的名字叫{0},现在已经{1}岁了，我最爱的还是我的{2}", pelepe.Name, pelepe.Age, pelepe.Hobby);
        }

        //继承
        public class LM
        {
            public string Name { get; set; }
            public string Tag { get; set; }
            public string ShanChang { get; set; }
        }
        public class MS : LM { }

        public static void LMS()
        {
            MS mS = new MS();
            mS.Name = "盲僧";
            mS.Tag = "我用双手成就你的梦想";
            mS.ShanChang = "打野";
            Console.WriteLine("你好，我的名字叫:{0},我的口头禅为:{1},我一般擅长:{2}",mS.Name,mS.Tag,mS.ShanChang);
        }
        //多态
        class sheep
        {
            public virtual void sea()
            {
                Console.WriteLine("这是什么水果的味道");
            }
        }
        class play : sheep
        {
            public override void sea()
            {
                Console.WriteLine("这是苹果的味道");
            }
        }
        class squer : sheep
        {
            public override void sea()
            {
                Console.WriteLine("这是葡萄的味道");
            }
        }
        class triang : sheep
        {
            public override void sea()
            {
                Console.WriteLine("这是红薯的味道");
            }
        }

        public static void Duo()
        {
            sheep sheep1 = new sheep();
            sheep1.sea();
            play plays = new play();
            squer squers = new squer();
            triang triangs = new triang();
            Fn(plays);
            Fn(squers);
            Fn(triangs);
        }
        static void Fn(sheep sheeps)
        {
            sheeps.sea();
        }
        //集合
        //ArrayList
        public static void ArrayLists()
        {
            ArrayList arrayList = new ArrayList();
            arrayList.Add("武松");
            arrayList.Add("晁盖");
            arrayList.Add("宋江");
            arrayList.Add("张顺");
            arrayList.Sort();
            Console.WriteLine("按照姓名进行排序");
            
            foreach (var item in arrayList)
            {
                Console.WriteLine("{0}", item);
            }
        }
        //list
        class Person
        {
            private string _name;//姓名
            private int _age;//年龄
            public string name {get { return _name; }}
            public int age { get { return _age; } }
            public Person(string name, int age)
            {
                this._name = name;
                this._age = age;
            }
        }

        public static void Persons()
        {
            Person person1 = new Person("刘汉",21);
            Person person2 = new Person("王亚", 27);
            Person person3 = new Person("汉卿", 37);
            List<Person> people = new List<Person>();
            people.Add(person1);
            people.Add(person2);
            people.Add(person3);
            foreach (var item in people)
            {
                Console.WriteLine(item);
            }
        }

        //hashset
        public static void HashSet()
        {
           string[] name = new string[] { "汪涵", "刘谦", "任杰", "张庆" };
            HashSet<string> h = new HashSet<string>(name);
            foreach (var i in h)
            {
                Console.Write(i);
            }
        }
        //stack
        public static void Stacks()
        {
            Stack stack = new Stack();
            stack.Push("shit");
            stack.Push("fack you");
            foreach (var i in stack)
            {
                Console.WriteLine(i);
            }
        }

        //泛型
        class A
        {
            public void Func1()
            {
                Console.WriteLine("这是王者的段位");
            }
        }
        class B
        {
            public void Func2()
            {
                Console.WriteLine("这是青铜的段位");
            }
        }
        class C<S, Q> where S : A where Q : B
        {
            public C(S s, Q q)
            {
                s.Func1();
                q.Func2();
            }
        }
        public static void JiLei()
        {
            A MYa = new A();
            B MYb = new B();
            C<A, B> MYc = new C<A, B>(MYa, MYb);
           // Console.WriteLine(MYc);
        }
        //接口约束
        interface ALife<T, Q>
        {
            void Mylife( T t);
            void Youlife(Q q);
        }
        public class Mast
        {
            public string M { get; set; }
        }
        public class Nius
        {
            public string M { get; set; }
        }
        public class Mast1 : ALife<Mast, Nius>
        {
            public void Mylife(Mast t)
            {
                Console.WriteLine(t.M);
            }

          
            public void Youlife(Nius nius)
            {
                Console.WriteLine(nius.M);
            }

           
        }
        public static void Shixian()
        {
            Mast mast = new Mast();
            mast.M = "象魞";
            Nius nius = new Nius();
            nius.M = "蛤蜊";
            ALife<Mast, Nius> aLife = new Mast1();
            aLife.Mylife(mast);
            aLife.Youlife(nius);
        }

        //泛型结构
        struct point<T>
        {
            public T x;
            public T y;
        }
        public static void Mat()
        {
            point<int> point = new point<int>();
            point.x = 6;
            point.y = 9;
            Console.WriteLine(point.x.ToString()
            +"\n"+point.y.ToString());
        }
        //泛型方法
        public static string Consoter<T,Q>(string restult)
        {
            string englishStr = "lift join";
            string[] vs = Enum.GetNames(typeof(T));
            int i = 0;
            while (i<vs.Length)
            {
                if (vs[i]== restult)
                {
                    string[] engstr = Enum.GetNames(typeof(Q));
                    englishStr = engstr[i];
                    break;
                }
                i++;
            }
            return englishStr.Replace("-", " ");
        }

        //泛型委托
        static bool IsMan(string name)
        {
            return false;
        }
        public static void WT()
        {
            Predicate<string> isMan;
            isMan = IsMan;
            Console.WriteLine("蛋蛋是谁");
            string result1 = isMan.Invoke("蛋蛋") ? "王韩!" : "杜楠!";
            Console.WriteLine(result1);
        }
    }
}
